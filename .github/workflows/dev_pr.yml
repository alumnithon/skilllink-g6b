name: Development PR Checks

on:
  pull_request:
    branches:
      - development

env:
  # Cache optimization for faster builds
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: '5'

  # Database configuration for dev environment
  MYSQL_ROOT_PASSWORD: 'dev_testpassword'
  MYSQL_DATABASE: 'skilllink_dev_db'
  MYSQL_HOST: 127.0.0.1
  MYSQL_PORT: 3306
  MYSQL_USER: root

  # Application configuration for dev environment
  JWT_SECRET: 'dev_jwt_secret_for_ci'
  FRONTEND_CORS_URL: '*'
  FRONTEND_REDIRECT_URL: 'http://localhost:5173'

  # Email configuration for dev environment
  EMAIL_HOST: 'smtp.mailtrap.io'
  EMAIL_PORT: '587'
  EMAIL_USER: 'dev_test_user'
  EMAIL_PASS: 'dev_test_password'

jobs:
  build_and_verify:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4.7.1
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          check-latest: false
          cache-dependency-path: 'pom.xml'

      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h"$MYSQL_HOST" -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_ROOT_PASSWORD --silent; do
            echo 'Waiting for MySQL...'
            sleep 5
          done

      - name: Build and verify with Maven
        run: |
          echo "🏗️ Building and verifying application..."
          mvn --batch-mode --update-snapshots clean verify
          echo "✅ Build and verification completed successfully"

      # Docker validation section - ensures containerized app works
      - name: Test Docker build
        run: |
          docker build -t skilllink:dev-pr-${{ github.event.number }} .
          echo "✅ Docker image builds successfully"

      - name: Docker cleanup
        if: always()
        run: |
          docker rm -f dev-test-container 2>/dev/null || true
          docker rmi skilllink:dev-pr-${{ github.event.number }} 2>/dev/null || true

      - name: Development PR validation summary
        run: |
          echo "🎉 Comprehensive development validation completed!"
          echo "✅ Code quality checks passed"
          echo "✅ Docker container builds and runs successfully"
          echo "👀 Ready for manual review"
           
  # Manual review reminder job
  review_reminder:
    needs: build_and_verify
    runs-on: ubuntu-latest

    steps:
      - name: Request manual review
        uses: actions/github-script@v7
        with:
          script: |
            // Request review from code owners (defined in CODEOWNERS file)
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: [], // Individual reviewers (if needed)
                team_reviewers: ['grupo6-backend', 'grupo6-fullstack', 'grupo6-devops'] // Team reviewers from alumnithon org
              });
            } catch (error) {
              console.log('Note: Could not auto-assign team reviewers, CODEOWNERS will handle it:', error.message);
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '👀 **Manual review requested**\n\n✅ All quality checks completed\n✅ Docker container validation successful\n\n📋 **Review assigned via CODEOWNERS** - @alumnithon/grupo6-backend, @alumnithon/grupo6-fullstack, and @alumnithon/grupo6-devops teams will be notified'
            });
